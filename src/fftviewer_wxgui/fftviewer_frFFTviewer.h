#ifndef __fftviewer_frFFTviewer__
#define __fftviewer_frFFTviewer__

/**
@file
Subclass of frFFTviewer, which is generated by wxFormBuilder.
*/
#include <thread>
#include <atomic>
#include <vector>
#include "fftviewer_wxgui.h"
#include <wx/timer.h>
#include <mutex>
#include "lime/LimeSuite.h"
#include "IModuleFrame.h"

namespace lime {
class SDRDevice;
}

class fftviewer_frFFTviewer : public frFFTviewer
{
  public:
    virtual bool Initialize(lime::SDRDevice* device) override;
    virtual void Update() override;

  protected:
    std::atomic<bool> enableTransmitter;
    std::atomic<int> windowFunctionID;
    std::atomic<bool> captureSamples;
    std::atomic<int> averageCount;
    std::atomic<bool> updateGUI;
    std::atomic<bool> enableFFT;
    std::string captureFilename;
    // Handlers for frFFTviewer events.
    void OnWindowFunctionChanged(wxCommandEvent& event);
    void OnbtnStartStop(wxCommandEvent& event);
    void OnChannelVisibilityChange(wxCommandEvent& event);
    void OnStreamChange(wxCommandEvent& event);
    void OnEnPwr(wxCommandEvent& event);
    void OnFmtChange(wxCommandEvent& event);
    void OnAvgChange(wxSpinEvent& event);
    void OnAvgChangeEnter(wxCommandEvent& event);
    void OnWindowFunctionChange(wxCommandEvent& event);
    static void StreamingLoop(
        fftviewer_frFFTviewer* pthis, const unsigned int fftSize, const int channelsCount, const uint32_t format);

    void OnUpdateStats(wxTimerEvent& event);
    void OnUpdatePlots(wxThreadEvent& event);

  public:
    /** Constructor */
    fftviewer_frFFTviewer(wxWindow* parent, wxWindowID id);
    ~fftviewer_frFFTviewer();
    //// end generated class members
    void SetNyquistFrequency();

    void StartStreaming();
    void StopStreaming();
    void OnbtnCaptureClick(wxCommandEvent& event);

  protected:
    static constexpr int cMaxChCount = 2;

    /** @brief Structure for storing the fast Fourier transform information for the display into the GUI */
    struct DataToGUI {
        std::vector<float> samplesI[cMaxChCount]; ///< The in-phase component samples
        std::vector<float> samplesQ[cMaxChCount]; ///< The quadrature component samples
        std::vector<float> fftBins[cMaxChCount]; ///< The fast Fourier transform bins
        float nyquist_Hz; ///< The Nyquist frequency
        float rxDataRate_Bps; ///< The input data speed, in bytes per second
        float txDataRate_Bps; ///< The output data speed, in bytes per second

        /**
          @brief The copy operator of the class.
          @param src The instance to copy the data from.
          @return The new instance of this class.
         */
        DataToGUI& operator=(DataToGUI& src)
        {
            for (int ch = 0; ch < cMaxChCount; ++ch)
            {
                this->samplesI[ch].swap(src.samplesI[ch]);
                this->samplesQ[ch].swap(src.samplesQ[ch]);
                this->fftBins[ch].swap(src.fftBins[ch]);
                this->nyquist_Hz = src.nyquist_Hz;
                this->rxDataRate_Bps = src.rxDataRate_Bps;
                this->txDataRate_Bps = src.txDataRate_Bps;
            }
            return *this;
        }
    } streamData;

    std::vector<float> fftFreqAxis;
    std::vector<float> timeXAxis;
    std::atomic<bool> mStreamRunning;
    std::atomic<bool> stopProcessing;
    std::thread threadProcessing;
    wxString printDataRate(float dataRate);

    lime::SDRDevice* device;
    wxTimer* mGUIupdater;
    unsigned lmsIndex;
};

#endif // __fftviewer_frFFTviewer__
